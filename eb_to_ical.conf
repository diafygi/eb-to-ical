location ~ /eventbrite-proxy {
    internal;
    resolver 8.8.8.8;
    proxy_ssl_trusted_certificate /etc/ssl/certs/DigiCert_Global_Root_CA.pem;
    proxy_ssl_verify on;
    proxy_ssl_verify_depth 2;
    proxy_pass_request_headers off;
    set_by_lua_block $eb_url { return ngx.unescape_uri(ngx.var.arg_eb_url) }
    proxy_pass $eb_url;
}

location ~ /eventbrite-organizer-ical {

    default_type "text/calendar; charset=utf-8";
    add_header Content-Disposition 'attachment; filename="eventbrite_organizer_events.ics"';

    content_by_lua_block {
        cjson = require("cjson")

        -- iCal escape logic
        function escape(str)
            -- only allow simple ascii characters and linebreaks
            local escaped, n, err = ngx.re.gsub(str, "[^\32-\126\n]", "", "jo")
            if escaped then
                str = escaped
            end
            -- backslashes, commas, semicolons
            escaped, n, err = ngx.re.gsub(str, "(\\\\|,|;)", "\\$1", "jo")
            if escaped then
                str = escaped
            end
            -- linebreaks
            escaped, n, err = ngx.re.gsub(str, "\n", "\\n", "jo")
            if escaped then
                str = escaped
            end
            return str
        end

        -- iCal line limit at 75 octets
        max_len = 75 - 2 -- 75 minus linebreak characters (\r\n)
        function say_wrap(str)
            local c = 1
            repeat
                local line = ""
                if c == 1 then
                    -- first line has no space at start of line
                    line = string.sub(str, 0, max_len)
                    str = string.sub(str, max_len + 1, #str)
                else
                    -- subsequent lines have a space at start of line
                    line = " " .. string.sub(str, 0, max_len - 1)
                    str = string.sub(str, max_len, #str)
                end
                ngx.print(line .. "\r\n")
                c = c + 1
            until #str == 0
        end

        -- determine the organizer_id from the query parameter
        local organizer_id, err = ngx.re.match(ngx.unescape_uri(ngx.var.arg_organizer), "([0-9a-zA-Z]+)/?(\\?[^\\?]+)?$")
        if not organizer_id then
            ngx.status = 400
            ngx.header.content_type = "text/plain";
            ngx.say("Unknown Eventbrite Organization")
            ngx.exit(400)
            return
        end

        -- Can't use the API since /v3/organizations/{org_id}/events/ doesn't work, so have to scrape from the website itself :(
        -- (see https://groups.google.com/d/msg/eventbrite-api/g88Ian3Kidw/XupDhExqAQAJ)

        -- make eventbrite request to get organizer's future events (getting just the first page is fine for the calendar)
        eb_url_future = table.concat({"https://www.eventbrite.com/org/", organizer_id[1], "/showmore/?type=future&page=1"})
        resp_future = ngx.location.capture("/eventbrite-proxy", { args = { eb_url = eb_url_future } })
        if resp_future.status ~= 200 then
            ngx.status = resp_future.status
            ngx.header.content_type = "text/plain";
            ngx.say("Eventbrite Error, go to this url to troubleshoot: " .. eb_url_future)
            ngx.exit(resp_future.status)
            return
        end
        data_obj_future = cjson.decode(resp_future.body)

        -- make eventbrite request to get organizer's past events (getting just the first page is fine for the calendar)
        eb_url_past = table.concat({"https://www.eventbrite.com/org/", organizer_id[1], "/showmore/?type=past&page=1"})
        resp_past = ngx.location.capture("/eventbrite-proxy", { args = { eb_url = eb_url_past } })
        if resp_past.status ~= 200 then
            ngx.status = resp_past.status
            ngx.header.content_type = "text/plain";
            ngx.say("Eventbrite Error, go to this url to troubleshoot: " .. eb_url_past)
            ngx.exit(resp_past.status)
            return
        end
        data_obj_past = cjson.decode(resp_past.body)

        -- merge the future and past events
        events = {}
        for i, event in ipairs(data_obj_future['data']['events']) do
            table.insert(events, event)
        end
        for i, event in ipairs(data_obj_past['data']['events']) do
            table.insert(events, event)
        end

        -- VCALENDAR header
        say_wrap("BEGIN:VCALENDAR")
        say_wrap("VERSION:2.0")
        say_wrap("PRODID:-//DaylightPirates//EB-to-iCAL//EN")

        -- VEVENT objects
        for i, event in ipairs(events) do

            -- X-WR-CALNAME (first loop before VEVENT)
            if i == 1 then
                if event['organizer'] ~= ngx.null then
                    say_wrap("X-WR-CALNAME:".. escape(event['organizer']['name']) .. " - Eventbrite Events")
                    say_wrap("X-ORIGINAL-URL:".. escape(event['organizer']['url']))
                else
                    say_wrap("X-WR-CALNAME:Eventbrite Events")
                end
            end

            say_wrap("BEGIN:VEVENT")

            -- DTSTAMP
            local dtstamp, n, err = ngx.re.gsub(event['published'], "-|:", "", "jo")
            say_wrap("DTSTAMP:" .. escape(dtstamp))

            -- DTSTART
            local dtstart, n, err = ngx.re.gsub(event['start']['utc'], "-|:", "", "jo")
            say_wrap("DTSTART:" .. escape(dtstart))

            -- DTEND
            local dtend, n, err = ngx.re.gsub(event['end']['utc'], "-|:", "", "jo")
            say_wrap("DTEND:" .. escape(dtend))

            -- SUMMARY
            say_wrap("SUMMARY:" .. escape(event['name']['text']))

            -- DESCRIPTION
            say_wrap("DESCRIPTION:" .. escape(event['url'] .. "\n\n" .. event['description']['text']))

            -- CREATED (ngx.utctime, "yyyy-mm-dd hh:mm:ss")
            local created, n, err = ngx.re.gsub(ngx.utctime(), "-|:", "", "jo")
            local created, n, err = ngx.re.gsub(created, " ", "T", "jo")
            say_wrap("CREATED:" .. escape(created) .. "Z")

            if event['venue'] ~= ngx.null then
                -- GEO
                local latitude = event['venue']['address']['latitude']
                local longitude = event['venue']['address']['longitude']
                if latitude ~= ngx.null and longitude ~= ngx.null then
                    say_wrap("GEO:" .. escape(latitude) .. ";" .. escape(longitude))
                end

                -- LOCATION
                local location = nil
                if event['venue']['name'] ~= ngx.null then
                    location = event['venue']['name']
                end
                if event['venue']['address']['localized_address_display'] ~= ngx.null then
                    if location ~= nil then
                        location = location .. ", " .. event['venue']['address']['localized_address_display']
                    else
                        location = event['venue']['address']['localized_address_display']
                    end
                end
                if location ~= nil then
                    say_wrap("LOCATION:" .. escape(location))
                end
            end

            -- URL
            say_wrap("URL:" .. escape(event['url']))

            -- LAST-MODIFIED
            local changed, n, err = ngx.re.gsub(event['published'], "-|:", "", "jo")
            say_wrap("LAST-MODIFIED:" .. escape(changed))

            -- UID
            say_wrap("UID:" .. escape(event['id']))

            say_wrap("END:VEVENT")
        end

        -- VCALENDAR footer
        say_wrap("END:VCALENDAR")
    }
}

